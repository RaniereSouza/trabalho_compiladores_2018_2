#*********************************************************#
# Makefile Compilador (Code Generator - MIPS/Assembly)    #
# Trabalho 3 da disciplina MATA61 - Compiladores - 2018.2 #
# Gerador de Código Assembly (MIPS) em C++                #
# Aluno:     Raniere de Souza Santos                      #
# Matrícula: 209102498                                    #
# Aluno:     Ramon Dias Costa                             #
# Matrícula: 213102556                                    #
#*********************************************************#

YYFILES         = compiler_parser.tab.cpp compiler_parser.tab.hpp #FILES GENERATED BY BISON
CC              = g++ #SOURCE CODE COMPILER
CFLAGS          = -g -Wall -std=c++11 #SOURCE CODE COMPILER FLAGS
BISON_FLAGS     = -d -v #BISON FLAGS
BISON_SOURCE    = compiler_parser.ypp #BISON FILE WITH THE GRAMMAR AND THE SEMANTIC ACTIONS
COMP_SOURCES    = compiler_scanner.cpp compiler_parser.tab.cpp compiler_codegen.cpp compiler_main.cpp #SOURCE FILES TO COMPILE FINAL PROGRAM
COMP_OUTPUT     = compilador #NAME OF THE GENERATED EXECUTABLE
GEN_LOCAL_FILES = $(COMP_OUTPUT) compiler_tokens.out compiler_parse_tree.syn compiler_mips_code.asm compiler_parser.output compiler_main.o compiler_codegen.o compiler_parser.tab.o compiler_scanner.o $(YYFILES) #GENERATED LOCAL FILES
EXEC_PARAMS     = compiler_code.in compiler_mips_code.asm #PARAMETERS TO PASS TO GENERATED PROGRAM
EXEC_OUT_PATH   = ~/Documentos/compiler_execution_output.txt #FILE TO SAVE CODE PRINTS
VALG_OUT_PATH   = ~/Documentos/valgrind_output.txt #FILE TO SAVE VALGRINDER LOGS
VALG_FLAGS      = --leak-check=yes --show-reachable=yes --num-callers=16 --log-file=$(VALG_OUT_PATH) -v #VALGRINDER FLAGS

all: compiler

compiler:                                                                        clean $(YYFILES) compiler_scanner.cpp compiler_codegen.cpp compiler_main.cpp
	                                                                             $(CC) $(CFLAGS) $(COMP_SOURCES) -o $(COMP_OUTPUT)

$(YYFILES):                                                                      compiler_parser.ypp
	                                                                             bison $(BISON_FLAGS) $(BISON_SOURCE)

compiler_scanner.cpp compiler_parser.ypp compiler_codegen.cpp compiler_main.cpp: compiler_headings.hpp
compiler_scanner.cpp:                                                            compiler_parser.tab.hpp

valgrind:
	rm $(EXEC_OUT_PATH) && valgrind $(VALG_FLAGS) ./$(COMP_OUTPUT) $(EXEC_PARAMS) >> $(EXEC_OUT_PATH)

clean:
	rm -rf $(GEN_LOCAL_FILES)
